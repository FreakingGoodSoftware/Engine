// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Engine.API;
using Engine.API.Models;
using Microsoft.Rest;

namespace Engine.API
{
    public static partial class ProductCategoriesExtensions
    {
        /// <param name='operations'>
        /// Reference to the Engine.API.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ProductCategory DeleteProductCategoryById(this IProductCategories operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductCategories)s).DeleteProductCategoryByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.API.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ProductCategory> DeleteProductCategoryByIdAsync(this IProductCategories operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Engine.API.Models.ProductCategory> result = await operations.DeleteProductCategoryByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.API.IProductCategories.
        /// </param>
        public static IList<ProductCategoryDTO> GetProductCategories(this IProductCategories operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductCategories)s).GetProductCategoriesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.API.IProductCategories.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ProductCategoryDTO>> GetProductCategoriesAsync(this IProductCategories operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Engine.API.Models.ProductCategoryDTO>> result = await operations.GetProductCategoriesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.API.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ProductCategory GetProductCategoryById(this IProductCategories operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductCategories)s).GetProductCategoryByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.API.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ProductCategory> GetProductCategoryByIdAsync(this IProductCategories operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Engine.API.Models.ProductCategory> result = await operations.GetProductCategoryByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.API.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static IList<ProductCategoryDTO> GetProductChildCategoriesById(this IProductCategories operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductCategories)s).GetProductChildCategoriesByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.API.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ProductCategoryDTO>> GetProductChildCategoriesByIdAsync(this IProductCategories operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Engine.API.Models.ProductCategoryDTO>> result = await operations.GetProductChildCategoriesByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.API.IProductCategories.
        /// </param>
        /// <param name='productCategory'>
        /// Required.
        /// </param>
        public static ProductCategory PostProductCategoryByProductcategory(this IProductCategories operations, ProductCategory productCategory)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductCategories)s).PostProductCategoryByProductcategoryAsync(productCategory);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.API.IProductCategories.
        /// </param>
        /// <param name='productCategory'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ProductCategory> PostProductCategoryByProductcategoryAsync(this IProductCategories operations, ProductCategory productCategory, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Engine.API.Models.ProductCategory> result = await operations.PostProductCategoryByProductcategoryWithOperationResponseAsync(productCategory, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.API.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='productCategory'>
        /// Required.
        /// </param>
        public static object PutProductCategoryByIdAndProductcategory(this IProductCategories operations, int id, ProductCategory productCategory)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductCategories)s).PutProductCategoryByIdAndProductcategoryAsync(id, productCategory);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.API.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='productCategory'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutProductCategoryByIdAndProductcategoryAsync(this IProductCategories operations, int id, ProductCategory productCategory, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutProductCategoryByIdAndProductcategoryWithOperationResponseAsync(id, productCategory, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
