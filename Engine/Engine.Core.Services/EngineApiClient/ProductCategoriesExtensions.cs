// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Engine.Core;
using Engine.Core.Models;
using Microsoft.Rest;

namespace Engine.Core
{
    public static partial class ProductCategoriesExtensions
    {
        /// <param name='operations'>
        /// Reference to the Engine.Core.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static object DeleteById(this IProductCategories operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductCategories)s).DeleteByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.Core.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeleteByIdAsync(this IProductCategories operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.DeleteByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.Core.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static string GetById(this IProductCategories operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductCategories)s).GetByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.Core.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetByIdAsync(this IProductCategories operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.Core.IProductCategories.
        /// </param>
        public static IList<ProductCategoryDTO> GetProductCategories(this IProductCategories operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductCategories)s).GetProductCategoriesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.Core.IProductCategories.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ProductCategoryDTO>> GetProductCategoriesAsync(this IProductCategories operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Engine.Core.Models.ProductCategoryDTO>> result = await operations.GetProductCategoriesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.Core.IProductCategories.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        public static object PostByValue(this IProductCategories operations, string value)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductCategories)s).PostByValueAsync(value);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.Core.IProductCategories.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostByValueAsync(this IProductCategories operations, string value, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostByValueWithOperationResponseAsync(value, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.Core.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        public static object PutByIdAndValue(this IProductCategories operations, int id, string value)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProductCategories)s).PutByIdAndValueAsync(id, value);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Engine.Core.IProductCategories.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutByIdAndValueAsync(this IProductCategories operations, int id, string value, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutByIdAndValueWithOperationResponseAsync(id, value, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
